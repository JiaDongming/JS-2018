1. wx:for 循环数组
       
        默认数组的当前项的下标变量名默认为 index，
        数组当前项的变量名默认为 item
        <view wx:for="{{array}}">
             {{index}}: {{item.message}}
        </view>

        Page({
            data: {
                array: [{
                message: 'foo',
                }, {
                message: 'bar'
                }]
            }
            })
    注意： 
        {{item}}代表值
        {{index}}代表下标
        wx:for所在的组件会批量显示。
2. wx:for支持嵌套循环
        wx:for 也可以嵌套，下边是一个九九乘法表

            <view wx:for="{{[1, 2, 3, 4, 5, 6, 7, 8, 9]}}" wx:for-item="i">
            <view wx:for="{{[1, 2, 3, 4, 5, 6, 7, 8, 9]}}" wx:for-item="j">
                <view wx:if="{{i <= j}}">
                {{i}} * {{j}} = {{i * j}}
                </view>
            </view>
            </view>
3. 自定义下标名和值名称
    wx:for-item="val" -- 修改循环值名称从默认的{{item}}变为{{val}}
    wx:for-index="i"  --修改循环的下标从默认的{{index}}变为{{i}}

    sample:
        <view wx:for="{{arr}}" wx:for-item="val" wx:for-index="i">
        <text>{{i}}----{{val}}</text>

        data: {
                arr:[1,2,3,4,5,6]
            },

4. block块
    block wx:for
        类似 block wx:if，也可以将 wx:for 用在<block/>标签上，以渲染一个包含多节点的结构块。例如：

        <block wx:for="{{[1, 2, 3]}}">
        <view> {{index}}: </view>
        <view> {{item}} </view>
        </block>

5. wx:key 理解
    wx:key 的值以两种形式提供

        字符串，代表在 for 循环的 array 中 item 的某个 property，
        该 property 的值需要是列表中唯一的字符串或数字，且不能动态改变。

        保留关键字 *this 代表在 for 循环中的 item 本身，
        这种表示需要 item 本身是一个唯一的字符串或者数字，如：

        当数据改变触发渲染层重新渲染的时候，会校正带有 key 的组件，
        框架会确保他们被重新排序，而不是重新创建，以确保使组件保持自身的状态，并且提高列表渲染时的效率。


